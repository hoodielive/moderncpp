An array stores data in block of sequential memory.

Arrays have a limitation in C++.
1. They can only contain 1 type.

When you think of it, its genius given that we can always be sure that the size and type will Always remain the same.

- Consider an array of 6 Cube objects.
- Using the sizeof(Cube) function we find each is 8bytes large.

long array[6] { 2, 4, 6, 8, 9, 10 };


- What is the offset to index 8?

8x8 = 64 bytes


2. Has to have a fixed capacity.
- Arrays must store their data sequentially in memory.
- The capacity of an array is the maximum number of elements that can be stored.
- The size of an array is current number of elements stored in the array.
- An array is full when the size of the array is = to the capacity.
- The only way to add another element is to allocate a new, larger array and copy over all of the data.

std::vector implements an array that dynamically grows in size automatically. However, all properties remain true:
  - Array elements are a fixed data type.
  - At any given point, the array has a fixed capacity.
  - The array must be expanded when the capacity is reached.


## Linked memory
- Stores data together with a "link" to the location (in memory) of the next list node instead of storing it sequentially
  like arrays.

  List Nodes:
  a list node refers to pair of both the data and the link.

  C++ ListNode Class:
  template<typename T>
  class ListNode
  {
    public:
      T &data;
      ListNode *next;
      ListNode(T &data) : data(data), next(NULL) {}
  }

 Linked List:
 Zero or more ListNode elements linked together form a Linked List.

  - A pointer called the 'head pointer' stores the link to the beginning of the list.
  - A pointer to nullptr marks the end of the list.
