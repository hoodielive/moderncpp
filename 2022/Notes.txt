A Variable
- A name
- A type
- A value
- A location in memory ("memory address")


Variables live on a STACK.

Stack memory

By default, every variable in C++ is placed in stack memory.

Stack memory is associated with the current function and the memory's lifecycle 
is tied to the function:

When the function returns or ends, the stack memory of that function is released back to the
system.

Stack memory always starts from a higher address and grows DOWN.

A Pointer is a variable that stores the memory address of the data.
Simply put: pointers are a level of indirection from the data.


Heap Memory

In C++, a pointer is defined by adding an * to the type of the variable.
  - Integer pointer: int* p = &num;

Heap memory always starts from a lower address and grows UP.


Object Orientation

When an instance of a class is created, the class constructor sets up the
initial state of the object.

If we do not provide any custom constructors, the C++ compiler provides an
automatic 'default' constructor for our class free.

The automatic default constructor will only initialize all member Variables
to their default values.

Custom Default Constructor: The simplest constructor we can provide is a custom
default constructor that specifies the state of the object when the object is constructed.

We define one by:
- A member function with the same name of the class.
- The function takes zero parameters.
- The function does NOT return a value.

Storage by Reference
A reference is an alias to existing memory and is denoted in the type with an amperstand(&).
A reference does not store memory itself, it is only an alias to another variable.
The alias must be assigned when the variable is initialized.

For example:
Cube &c = cube; // Alias to variable cube.
int &i = count; // Alias to the variable i.
egun::HSLAPixel &p // illegal! must alias something when variable is initialized.


# Destructors
When an instance of a class is cleaned up, the class destructor is the last call in a class's lifecycle.

An automatic default destructor is added to your class if no other destructor is defined.

The only action of the automatic default destructor is to call the default destructor of all member objects.

A destructor should never be called directly. Instead, it is automatically called when the object's memory is 
being reclaimed by the system.

If the object is on the stack, when the fuction returns.
If the object is on the heap, when the delete function is called. 

To add custom behaviro to the end-of-life of the function, a custom destructor can be defined as:
1. A custom destructor is a member function.
2. The function's destructor is the name of the class, preceded by a tilde ~.
3. All destructors have zero arguments and no return type.

Cube::~Cube(); // custom destructor


# Templates
A template type is a special type that can take on different types when the type is initialized.

std::vector uses a template type.

std::vector<char>
std::vector<int>
std::vector<uuic::Cube> // where uuic is a namespace.


Expression - combines things returns a value.
Statement - execute in sequence - carry out some action.
Expression Statement 
