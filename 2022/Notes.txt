A Variable

- A name
- A type
- A value
- A location in memory ("memory address")

Variables live on a STACK.


Stack memory

By default, every variable in C++ is placed in stack memory.

Stack memory is associated with the current function and the memory's lifecycle 
is tied to the function:

When the function returns or ends, the stack memory of that function is released back to the
system.

Stack memory always starts from a higher address and grows DOWN.

A Pointer is a variable that stores the memory address of the data.
Simply put: pointers are a level of indirection from the data.


Heap Memory

In C++, a pointer is defined by adding an * to the type of the variable.
  - Integer pointer: int* p = &num;

Heap memory always starts from a lower address and grows UP.


Object Orientation

When an instance of a class is created, the class constructor sets up the
initial state of the object.

If we do not provide any custom constructors, the C++ compiler provides an
automatic 'default' constructor for our class free.

The automatic default constructor will only initialize all member Variables
to their default values.

Custom Default Constructor: The simplest constructor we can provide is a custom
default constructor that specifies the state of the object when the object is constructed.

We define one by:
- A member function with the same name of the class.
- The function takes zero parameters.
- The function does NOT return a value.

Storage by Reference
A reference is an alias to existing memory and is denoted in the type with an amperstand(&).
A reference does not store memory itself, it is only an alias to another variable.
The alias must be assigned when the variable is initialized.

For example:
Cube &c = cube; // Alias to variable cube.
int &i = count; // Alias to the variable i.
egun::HSLAPixel &p // illegal! must alias something when variable is initialized.
